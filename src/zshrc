#!/usr/bin/env zsh
#
# Executes commands at the start of an interactive session.
#

if ! [[ -o login ]]; then
  source ~/.zprofile
fi

#
# Prompt
#

zstyle :prompt:pure:git:stash show yes
zinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'
zinit light sindresorhus/pure

#
# Autoload
#

autoload -Uz _zinit

# Set the Zsh functions to load (man zshcontrib).
autoload -Uz "zargs"
autoload -Uz "zmv"
autoload run-help

#
# Completions
#

zinit ice blockf atpull'zinit creinstall -q .'
zinit light zsh-users/zsh-completions
autoload compinit
compinit

zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes
zinit wait lucid has'docker' for \
  as'completion' is-snippet 'https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker' \
  as'completion' is-snippet 'https://github.com/docker/compose/blob/master/contrib/completion/zsh/_docker-compose' \
  lukechilds/zsh-better-npm-completion atload"zpcdreplay" atclone'./zplug.zsh' g-plane/zsh-yarn-autocompletions \
  ryutok/rust-zsh-completions

#
# Options
#

setopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd.
setopt PUSHD_TO_HOME        # Push to home directory when no argument is given.
setopt CDABLE_VARS          # Change directory to a path stored in a variable.
setopt MULTIOS              # Write to multiple descriptors.
setopt EXTENDED_GLOB        # Use extended globbing syntax.
unsetopt CLOBBER            # Do not overwrite existing files with > and >>.
                            # Use >! and >>! to bypass.
unsetopt NOMATCH            # Allow ^ to be used unescaped in args.
                            # See https://github.com/ohmyzsh/ohmyzsh/issues/449#issuecomment-6973425

# History
zinit snippet PZT::modules/history
setopt NO_BANG_HIST # Let ! be !

## A way to do bash-style history ignore for certain commands
HISTORY_IGNORE="&:k:cd:ls:ll:la:l1:l.:..::pwd:exit:clear:cls"

# vi-style editor modes
export ZVM_LAZY_KEYBINDINGS=true
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode
# A 'fix' for zvm clobbering fzf's keybindings.
# See https://github.com/jeffreytse/zsh-vi-mode/issues/24
zvm_after_init_commands+=('source ~/.zinit/plugins/fzf/key-bindings.zsh')

# Autosuggestions
zinit ice wait lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions

# tell me when i could've typed less.
zinit ice wait lucid load djui/alias-tips

# 'Smart' auto-close, delete and skips over matching delimiters
zinit ice wait lucid load hlissner/zsh-autopair

# Syntax higlighting
zinit ice from"gh" wait lucid atinit"zpcompinit; zpcdreplay"
zinit light zdharma/fast-syntax-highlighting

# fzf
export FZF_DEFAULT_OPTS="--layout reverse --info inline --height 40%"
export FZF_CTRL_T_OPTS="--preview \"bat --style=numbers --color=always --line-range :500 {}\""
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_OPTS="--preview \"bat --style=numbers --color=always --line-range :500 {}\""
zinit pack"bgn-binary+keys" for fzf
# NOTE: fzf-tab needs to be loaded after compinit, but before plugins which will wrap widgets, such as zsh-autosuggestions or fast-syntax-highlighting!!
zinit ice wait lucid
zinit light Aloxaf/fzf-tab
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf --preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'
# give a preview of commandline arguments when completing `kill`
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf --preview \
  '[[ $group == "[process ID]" ]] && ps --pid=$word -o cmd --no-headers -w -w'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags --preview-window=down:3:wrap

#
# Aliases & Functions
#

# exa versions of some ls aliases.
alias ls='exa'
# Lists in one column, hidden files.
alias l='exa -1a'
# Lists human readable sizes.
alias ll='exa -lh --git'
# Lists human readable sizes, recursively.
alias lr='ll -R'
# Lists human readable sizes, hidden files.
alias la='ll -a'
# Lists sorted by extension (GNU only).
alias lx='ll -s extension'
# Lists sorted by size, largest last.
alias lk='ll -s size'
# Lists sorted by date, most recent last.
alias lt='ll -s oldest'
# Lists sorted by date, most recent last, shows change time.
alias lc='lt -t created'
# Lists sorted by date, most recent last, shows access time.
alias lu='lt -t accessed'


# Utils

# Default top to organize by cpu usage
alias top='top -o cpu'
# Pings with 5 packets, not unlimited
alias ping='ping -c 5'
# Disk free, in gigabytes, not bytes
alias df='df -h'
# Calculate total disk usage for a folder
alias du='du -h -c'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | grep -o 'inet6\? \(\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)\|[a-fA-F0-9:]\+\)' | sed -e 's/inet6* //'"

# Python aliases
alias setup="nocorrect python ./setup.py"
# Show the current python path
alias pypath='python -c "import sys; print sys.path" | tr "," "\n" | grep -v "egg"'

# Django aliases
alias manage="nocorrect python ./manage.py"
alias dumpauth="manage dumpdata --indent=2 auth sessions"
alias syncall="manage syncdb --noinput --all && manage migrate --fake"

# Use trash instead of rm
alias rm='trash'

# Use delta instead of diff
alias diff='delta'

# Use bat instead of cat
alias cat='bat'

# Use fd instead of find
alias find='fd'

# rage quit!!!
function fuck() {
  if killall -9 "$2"; then
    echo ; echo " (╯°□°）╯︵$(echo "$2"|toilet -f term -F rotate)"; echo
  fi
}
# alias rage quit for current user
alias fu='fuck you'

# Print some stats about zsh usage. Lifted from https://github.com/robbyrussell/oh-my-zsh/blob/20f536c06432a5cda86fc9b5bdf73fd1115cb84d/lib/functions.zsh
function zsh_stats() {
  fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n20
}

#
# vim aliases
#
alias vi='nvim'
alias vim='nvim'
alias vimdiff='nvim -d'

#
# Git aliases
#

alias g='git'

# alias the common git commands
for c (
  add
  bisect
  branch
  checkout
  clone
  commit
  diff
  fetch
  grep
  init
  log
  merge
  mv
  pull
  push
  rebase
  reflog
  reset
  rm
  show
  status
  stash
  switch
) alias "g$c"="git $c"

# alias all git aliases for even speedier access:
s=`git config --get-regexp alias`
for i ("${(s/alias./)s}") alias "g$i[(w)1]"="git $i[(w)1]"

#
# Docker aliases
#

# Image (i)
alias dimage='docker image'
for c (
  build
  history
  import
  inspect
  ls
  prune
  pull
  push
  rm
  save
  tag
) alias "di$c"="docker image $c"

# Volume (v)
alias dvolume='docker volume'
for c (
  inspect
  ls
  prune
  rm
) alias "dv$c"="docker volume $c"

# Network (n)
alias dnetwork='docker network'
for c (
  connect
  disconnect
  inspect
  ls
  prune
  rm
) alias "dn$c"="docker network $c"

# System (s)
alias dsystem='docker system'
for c (
  df
  prune
) alias "ds$c"="docker system $c"

# Docker Compose (c)
alias dcompose='docker-compose'
for c (
  build
  down
  exec
  kill
  logs
  ps
  pause
  unpause
  pull
  push
  ps
  run
  rm
  start
  scale
  restart
  up
  version
  stop
) alias "dc$c"="docker-compose $c"

# Docker (d)
for c (
  attach
  build
  diff
  exec
  history
  images
  inspect
  import
  kill
  logs
  login
  logout
  ps
  pause
  unpause
  pull
  push
  ps
  run
  rm
  rmi
  rename
  start
  restart
  stats
  save
  tag
  top
  update
  volume
  version
  wait
  stop
) alias "d$c"="docker $c"

# Container (d)
alias dcontainer='docker container'
# Most container commands are mirrored at the docker level,
# so we can just use the 'top level' aliases above.
# Here, we add aliases for the few that aren't.
for c (
  ls
  prune
) alias "d$c"="docker container $c"

# cleanup
unset c; unset s; unset i;
