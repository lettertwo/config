local StringUtil = require("util.string")

describe("Next.js app router patterns", function()
  it("matches page and default files", function()
    assert.is_true(StringUtil.matches_any_pattern("app/(group)/page.jsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/@auth/[id]/default.js"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/page.tsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/default.jsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/page.mdx"))
    assert.is_true(StringUtil.matches_any_pattern("app/test/page.md"))
    assert.is_true(StringUtil.matches_any_pattern("nested/app/resume/page.mdx"))
  end)

  it("matches forbidden, not-found, unauthorized files", function()
    assert.is_true(StringUtil.matches_any_pattern("app/[user]/forbidden.tsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/not-found.jsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/@bar/unauthorized.js"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/forbidden.tsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/not-found.jsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/unauthorized.js"))
  end)

  it("matches layout, loading, error, template files", function()
    assert.is_true(StringUtil.matches_any_pattern("app/(group)/loading.jsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/@admin/error.js"))
    assert.is_true(StringUtil.matches_any_pattern("app/[slug]/template.tsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/layout.tsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/loading.jsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/error.js"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/template.tsx"))
  end)

  it("matches api route files", function()
    assert.is_true(StringUtil.matches_any_pattern("app/api/route.ts"))
    assert.is_true(StringUtil.matches_any_pattern("app/(group)/api/route.js"))
    assert.is_true(StringUtil.matches_any_pattern("app/@foo/[bar]/api/route.jsx"))
    assert.is_true(StringUtil.matches_any_pattern("app/(foo)/@bar/[baz]/api/route.tsx"))
  end)

  it("does not match root-level Next.js files", function()
    assert.is_false(StringUtil.matches_any_pattern("app/page.tsx"))
    assert.is_false(StringUtil.matches_any_pattern("app/error.jsx"))
    assert.is_false(StringUtil.matches_any_pattern("app/route.jsx"))
    assert.is_false(StringUtil.matches_any_pattern("app/page.mdx"))
  end)

  it("does not match unrelated files", function()
    assert.is_false(StringUtil.matches_any_pattern("pages/index.tsx"))
    assert.is_false(StringUtil.matches_any_pattern("app/somefile.ts"))
    assert.is_false(StringUtil.matches_any_pattern("app/page.md"))
    assert.is_false(StringUtil.matches_any_pattern("app/layout.css"))
    assert.is_false(StringUtil.matches_any_pattern("app/api/route.go"))
  end)
end)

describe("StringUtil.title_path", function()
  it("handles root-level Next.js files", function()
    assert.equals("page.tsx", StringUtil.title_path("app/page.tsx"))
    assert.equals("error.jsx", StringUtil.title_path("app/error.jsx"))
  end)

  it("handles nested Next.js files", function()
    assert.equals("(group)/page.jsx", StringUtil.title_path("app/(group)/page.jsx"))
    assert.equals("@auth/[id]/default.js", StringUtil.title_path("app/@auth/[id]/default.js"))
    assert.equals("(foo)/@bar/[baz]/layout.tsx", StringUtil.title_path("app/(foo)/@bar/[baz]/layout.tsx"))
    assert.equals("resume/page.mdx", StringUtil.title_path("app/resume/page.mdx"))
  end)

  it("handles Next.js pattern with ambiguous segment", function()
    assert.equals("tests/page.tsx", StringUtil.title_path("app/tests/page.tsx"))
  end)

  it("handles non-ambiguous segments and files", function()
    assert.equals("util.lua", StringUtil.title_path("lua/plugins/lsp/util.lua"))
    assert.equals("Button.tsx", StringUtil.title_path("src/components/Button.tsx"))
    assert.equals("main.go", StringUtil.title_path("main.go"))
  end)

  it("handles ambiguous filetypes", function()
    assert.equals("lsp/init.lua", StringUtil.title_path("lua/plugins/lsp/init.lua"))
    assert.equals("pkg/index.js", StringUtil.title_path("packages/pkg/index.js"))
    assert.equals("crate/lib.rs", StringUtil.title_path("crates/crate/lib.rs"))
    assert.equals("docs/README.md", StringUtil.title_path("packages/pkg/docs/README.md"))
  end)

  it("handles ambiguous segments with ambiguous filetypes", function()
    assert.equals("lib/tests/main.rs", StringUtil.title_path("packages/pkg/lib/tests/main.rs"))
    assert.equals("lib/__tests__/README.md", StringUtil.title_path("lib/__tests__/README.md"))
    assert.equals("pkg/src/index.js", StringUtil.title_path("packages/pkg/src/index.js"))
    assert.equals("plugins/tests/lib/init.lua", StringUtil.title_path("plugins/tests/lib/init.lua"))
  end)

  it("handles ambiguous segment at root", function()
    assert.equals("tests/main.rs", StringUtil.title_path("tests/main.rs"))
  end)

  it("handles path with no filename", function()
    assert.equals("example", StringUtil.title_path("neat/example/"))
  end)

  it("handles custom options overriding defaults", function()
    local opts = {
      ambiguous_filetypes = { "custom.js" },
      ambiguous_segments = { "customseg" },
    }
    assert.equals("btw/customseg/custom.js", StringUtil.title_path("ex/src/btw/customseg/custom.js", opts))
    assert.equals("example/customseg/after.js", StringUtil.title_path("neat/example/customseg/after.js", opts))
    assert.equals("ex/customseg/btw/custom.js", StringUtil.title_path("neat/ex/customseg/btw/custom.js", opts))
    assert.equals("randomseg/custom.js", StringUtil.title_path("neat/ex/randomseg/custom.js", opts))
  end)
end)
